
//This code has been automatically generated by DudeLabs LLC RCConverter
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Text;
using System.Windows.Forms;

using DS.Showdown.Engines;
using DS.Showdown.ObjectLibrary;
using DS.Showdown.SharedForms;

namespace DS.Showdown.Game
{
	/// <summary>
	/// Summary description for frmShowdownForm.
	/// </summary>
	public partial class ShowdownForm : System.Windows.Forms.Form
	{
		private GameEngine engine;
		private League league;
        private Label[] homeScores;
        private Label[] visScores;

		bool autoPlayLog = false;

		public ShowdownForm()
		{
			//
			// Required for Windows Form Designer support
			//
			InitializeComponent();

			//
			// TODO: Add any constructor code after InitializeComponent call
			//

			engine = new GameEngine();
			BindLineupDoubleClick();
            CreateScoreArrays();
			ClearGameControls();
			autoPlayLogToolStripMenuItem.Checked = autoPlayLog;
		}

        private void CreateScoreArrays()
        {
            string controlName;

            homeScores = new Label[10];
            visScores = new Label[10];

            for (int i = 0; i < 10; i++)
            {
            	controlName = string.Format("lblHomeinning{0}", i+1);
                homeScores[i] = (Label) this.Controls[controlName];

            	controlName = string.Format("lblVisinning{0}", i+1);
                visScores[i] = (Label)this.Controls[controlName];
            }
        }

		private void BindEngineDelegates()
		{
			engine.LineScoreUpdate += new GameEngine.LineScoreUpdateHandler(DoLineScoreUpdate);
			engine.LineupUpdate += new GameEngine.LineupUpdateHandler(DoLineupUpdate);
			engine.BaseRunnerUpdate += new GameEngine.BaseRunnerUpdateHandler(DoBaseRunnerUpdate);
			engine.AtBatResultUpdate += new GameEngine.AtBatResultUpdateHandler(DoAtBatResultUpdate);
            engine.InningChange += new GameEngine.InningChangeHandler(DoInningChange);
		}

		private void UnbindEngineDelegates()
		{
			engine.LineScoreUpdate -= new GameEngine.LineScoreUpdateHandler(DoLineScoreUpdate);
			engine.LineupUpdate -= new GameEngine.LineupUpdateHandler(DoLineupUpdate);
			engine.BaseRunnerUpdate -= new GameEngine.BaseRunnerUpdateHandler(DoBaseRunnerUpdate);
			engine.AtBatResultUpdate -= new GameEngine.AtBatResultUpdateHandler(DoAtBatResultUpdate);
            engine.InningChange -= new GameEngine.InningChangeHandler(DoInningChange);
        }

		private void BindLineupDoubleClick()
		{
			foreach (Control ctrl in grpHomelineup.Controls)
			{
				ctrl.DoubleClick += new EventHandler(lineupDoubleClick);
			}

			foreach (Control ctrl in grpVislineup.Controls)
			{
				ctrl.DoubleClick += new EventHandler(lineupDoubleClick);
			}
		}

		void lineupDoubleClick(object sender, EventArgs e)
		{
			ShowBatterForm frmBatter;
			ShowPitcherForm frmPitcher;

			Label lbl = sender as Label;
			int slot;
			Team team;
			Batter hitter;
			Pitcher pitcher;

			if (lbl != null)
			{
				if (lbl.Name[3] == 'V')
				{
					team = engine.VisitingTeam;
				}
				else
				{
					team = engine.HomeTeam;
				}

				if (lbl.Name.EndsWith("pitcher") == false)
				{
					slot = Int32.Parse(lbl.Name.Substring(lbl.Name.Length - 1));

					hitter = team.GetBatterByLineup(slot - 1);

					frmBatter = new ShowBatterForm(hitter);

					frmBatter.ShowDialog();
				}
				else
				{
					pitcher = team.CurrentPitcher;

					frmPitcher = new ShowPitcherForm(pitcher);

					frmPitcher.ShowDialog();
				}
			}
		}

		private void mnuTeamsCreate_Click(object sender, EventArgs e)
		{
			engine.CreateTeams();
            mnuGamePlayball.Enabled = true;
			mnuGamePlaySimulated.Enabled = true;
            mnuTeamsCreate.Enabled = false;
		}

		void DoBaseRunnerUpdate(object sender, BaseRunnerUpdateArgs args)
		{
			switch (args.UpdateBase)
			{
				case Base.Home:
					lblAtbat.Text = args.RunnerName;
					break;

				case Base.First:
					lblOnfirst.Text = args.RunnerName;
					break;

				case Base.Second:
					lblOnsecond.Text = args.RunnerName;
					break;

				case Base.Third:
					lblOnthird.Text = args.RunnerName;
					break;

				default:
					break;
			}
		}

		public void DoAtBatResultUpdate(object sender, string result)
		{
			lblResult.Text = result;
		}

        public void DoInningChange(object sender, int newInning)
        {
            if (newInning == 1)
            {
                SetInningLabels(1);
            }
            else if (newInning > 10)
            {
                // extra innings, shift labels & values

                SetInningLabels(newInning - 9);
                ShiftInningScores();

            }
            
        }

        public void DoLineupUpdate(object sender, LineupUpdateArgs args)
        {
            switch (args.RoleType)
            {
                case LineupRoleType.Pitcher:
                    if (args.Location == TeamLocation.Home)
                    {
                        lblHomepitcher.Text = args.Name;
                    }
                    else
                    {
                        lblVispitcher.Text = args.Name;
                    }
                    
                    break;
                    
                case LineupRoleType.Batter:
                    UpdateLineupName(args.SlotNumber, args.Name, args.Location);
                    break;
                    
                case LineupRoleType.Team:
                    UpdateLineupName(args.SlotNumber, args.Name, args.Location);
                    break;
                    
                default:
                    // shouldn't get here
                    break;
            }
            
        }
        
		public void DoLineScoreUpdate(object sender, LineScoreUpdateArgs args)
		{
		    switch (args.UpdateType)
		    {
		        case LineScoreUpdateType.Name:
    				if (args.Location == TeamLocation.Home)
    				{
    					lblHomename.Text = args.SValue;
    				}
    				else
    				{
    					lblVisitname.Text = args.SValue;
    				}
    				break;
    				
    			case LineScoreUpdateType.InningScore:
    				UpdateInningScore(args.Inning, args.IValue, args.Location);
    			    break;
    			    
    			case LineScoreUpdateType.CurrentScore:
    			    if (args.Location == TeamLocation.Visitor)
    			    {
            			lblVisruns.Text = args.IValue.ToString();
    			    }
    			    else
    			    {
            			lblHomeruns.Text = args.IValue.ToString();
    			    }
    			    break;
    			    
    			case LineScoreUpdateType.CurrentHits:
                    if (args.Location == TeamLocation.Visitor)
                    {
                        lblVishits.Text = args.IValue.ToString();
                    }
                    else
                    {
                        lblHomehits.Text = args.IValue.ToString();
                    }
    			    break;
    			    
    			case LineScoreUpdateType.CurrentErrors:
    			    if (args.Location == TeamLocation.Visitor)
    			    {
            			lblViserrors.Text = args.IValue.ToString();
    			    }
    			    else
    			    {
            			lblHomeerrors.Text = args.IValue.ToString();
            		}
    			    break;

				case LineScoreUpdateType.Outs:
					lblOuts.Text = args.IValue.ToString();
					break;

				case LineScoreUpdateType.Inning:
					lblInning.Text = args.Inning.ToString();
					break;

				default:
    			    //better not get here
    			    break;
		    }
		    
		}

		private void UpdateLineupName(int slotNum, string name, TeamLocation loc)
		{
			string controlName;
			string containerName;
			Control displayControl = null;
			Control container = null;

			containerName = loc == TeamLocation.Home ? "grpHomelineup" : "grpVislineup";
			controlName = string.Format("lbl{0}{1}", loc == TeamLocation.Home ? "Home" : "Visitor", slotNum + 1);

			container = this.Controls[containerName];

			if (container != null)
			{
                if (slotNum == -1)
                {
                    container.Text = name;
                }
                else
                {
				    displayControl = container.Controls[controlName];

				    if (displayControl != null)
				    {
					    displayControl.Text = name;
				    }
                }
			}

		}

		private void UpdateInningScore(int inning, int score, TeamLocation loc)
		{
			Label  lbl;

            // if extra innings past 10, always update the last score box since innings will have shifted
            if (inning > 10)
            {
                inning = 10;
            }
            
            if (loc == TeamLocation.Home)
            {
                lbl = homeScores[inning - 1];
            }
            else 
            {
                lbl = visScores[inning - 1];
            }

            lbl.Text = score == -1 ? "" : score.ToString();
		}

		private void ClearGameControls()
		{
			lblHomename.Text = "";
			lblVisitname.Text = "";
			lblOuts.Text = "";
			lblInning.Text = "";

			lblVisruns.Text = "0";
			lblVishits.Text = "0";
			lblViserrors.Text = "0";
			lblHomeruns.Text = "0";
			lblHomehits.Text = "0";
			lblHomeerrors.Text = "0";

			lblAtbat.Text = "";
			lblOnfirst.Text = "";
			lblOnsecond.Text = "";
			lblOnthird.Text = "";

            SetInningLabels(1);

			for (int i = 1; i < 11; i++)
			{
				UpdateInningScore(i, -1, TeamLocation.Home);
				UpdateInningScore(i, -1, TeamLocation.Visitor);
			}
		}

        private void SetInningLabels(int startInning)
        {
			string controlName;
			Control displayControl;

            for (int i = 1; i < 11; i++)
            {
                controlName = string.Format("lblinning{0}", i);
			    displayControl = this.Controls[controlName];

			    if (displayControl != null)
			    {
				    displayControl.Text = (startInning + i - 1).ToString();
			    }
            }

        }

        private void ShiftInningScores()
        {
			for (int i = 0; i < 9; i++)
			{
				homeScores[i].Text = homeScores[i+1].Text;
                visScores[i].Text = visScores[i+1].Text;
			}

            homeScores[9].Text = "";
            visScores[9].Text = "";
        }

		private void mnuGamePlayball_Click(object sender, EventArgs e)
		{
			ClearGameControls();
			BindEngineDelegates();
			engine.PlayBall();

            mnuGamePlayball.Enabled = false;
			mnuGamePlaySimulated.Enabled = false;
            btnNextatbat.Enabled = true;
		}
		
		private void btnNextatbat_Click(object sender, EventArgs e)
		{
		    engine.NextAtBat();
		    
		    if (engine.GameIsComplete == true)
		    {
		        btnNextatbat.Enabled = false;
                mnuGamePlayball.Enabled = true;
				mnuGamePlaySimulated.Enabled = true;
                mnuTeamsCreate.Enabled = true;

				UnbindEngineDelegates();

				if (autoPlayLog == true)
				{
					ShowPlayLog();
				}
			}
		}

		private void mnuViewPlayLog_Click(object sender, EventArgs e)
		{
			ShowPlayLog();
		}

		private void ShowPlayLog()
		{
			PlayLogForm dlg = new PlayLogForm();

			dlg.LogText = engine.GameLog;
            
            dlg.Show();

		}

		private void mnuViewGamestats_Click(object sender, EventArgs e)
		{
			PlayLogForm dlg = new PlayLogForm();

			dlg.LogText = engine.GameStats;

			dlg.Show();
		}

		private void mnuViewSeasonstats_Click(object sender, EventArgs e)
		{
			PlayLogForm dlg = new PlayLogForm();

            dlg.WindowTitle = "Season Statistics";

			dlg.LogText = league.SeasonStats;

			dlg.Show();
		}

		private void mnuGamePlaySimulated_Click(object sender, EventArgs e)
		{
			engine.PlayBall();

			while (engine.GameIsComplete == false)
			{
				engine.NextAtBat();
			}

			if (autoPlayLog == true)
			{
				ShowPlayLog();
			}

		}

		private void viewToolStripMenuItem_Click(object sender, EventArgs e)
		{
			ShowTeamForm(engine.HomeTeam, true);
		}

		private void viewVisitingTeamMenuItem_Click(object sender, EventArgs e)
		{
			ShowTeamForm(engine.VisitingTeam, true);
		}

        private void ShowTeamForm(string abbrev, bool modal)
        {
            Team team = league.GetTeamByAbbrev(abbrev);

            if (team == null)
            {
                MessageBox.Show("Invalid team");
                return;
            }

            TeamForm form = new TeamForm(team);

            if (modal == true)
            {
                form.ShowDialog();
            }
            else
            {
                form.Show();
            }
        }

		private void ShowTeamForm(Team team, bool modal)
		{
			TeamForm form = new TeamForm(team);

			if (modal == true)
			{
				form.ShowDialog();
			}
			else
			{
				form.Show();
			}
		}

		private void autoPlayLogToolStripMenuItem_Click(object sender, EventArgs e)
		{
			autoPlayLog = autoPlayLog == true? false : true;
			autoPlayLogToolStripMenuItem.Checked = autoPlayLog;
		}

		private void loadLeagueToolStripMenuItem_Click(object sender, EventArgs e)
		{
			DBEngine dbEngine = new DBEngine();
            Cursor = Cursors.WaitCursor;
            //league = dbEngine.LoadLeague(1);
            //league = dbEngine.LoadLeague2(1);
            league = dbEngine.LoadLeague3(1);

            selectTeamsToolStripMenuItem.Enabled = true;
			mnuGamePlayball.Enabled = false;
			mnuGamePlaySimulated.Enabled = false;
			mnuTeamsCreate.Enabled = false;

            AddTeamMenus();

            resetSeasonStatsToolStripMenuItem.Enabled = true;
            standingsToolStripMenuItem.Enabled = true;
            
            Cursor = Cursors.Default;
		}

        private void AddTeamMenus()
        {
            if (league == null)
            {
                return;
            }

            foreach (Team team in league.Teams)
            {
                ToolStripMenuItem item = new ToolStripMenuItem();
                item.Text = team.Name;
                item.Tag = team;
                item.Click += new System.EventHandler(teamsView_Click);
    
                teamsViewToolStripMenuItem.DropDownItems.Add(item);
                
            }
        }

        private void teamsView_Click(object sender, EventArgs e)
        {
            Team team = ((ToolStripMenuItem)sender).Tag as Team;

            if (team == null)
            {
                return;
            }

            ShowTeamForm(team, true);
        }

        void resetSeasonStatsToolStripMenuItem_Click(object sender, EventArgs e)
		{
			foreach (Team tm in league.Teams)
			{
				tm.ResetSeasonStats();
			}
        }

        private void selectTeamsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            SelectTeamsForm form = new SelectTeamsForm(league);
            if (engine.HomeTeam != null)
            {
                form.HomeTeam = engine.HomeTeam;
                form.VisitingTeam = engine.VisitingTeam;
            }

            if (form.ShowDialog() == DialogResult.OK)
            {
                engine.HomeTeam = form.HomeTeam;
                engine.VisitingTeam = form.VisitingTeam;

                mnuGamePlayball.Enabled = true;
			    mnuGamePlaySimulated.Enabled = true;
            }
        }

        private void standingsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            StandingsForm form = new StandingsForm();

            form.StandingsText = league.GetStandingsText();

            form.ShowDialog();
        }

        private void topTenToolStripMenuItem_Click(object sender, EventArgs e)
        {
            TopTenForm frm;

            frm = new TopTenForm();

            frm.StatLeague = league;

            frm.ShowDialog();
        }

        private void mnuTeamvLineup_Click(object sender, EventArgs e)
        {

            EditLineup(engine.VisitingTeam, false);

        }

        private void mnuTeamhLineup_Click(object sender, EventArgs e)
        {
            EditLineup(engine.HomeTeam, true);
        }

        private void EditLineup(Team tm, bool homeTeam)
        {
            TeamLineupForm frm = new TeamLineupForm(tm, true);
            frm.GameMode = true;
            if (frm.ShowDialog() == DialogResult.OK)
            {
                if (frm.PitcherModified == true)
                {
                    Label pitcherLabel = (homeTeam == true) ? lblHomepitcher : lblVispitcher;

                    pitcherLabel.Text = tm.CurrentPitcher.Name;

                    engine.SwapCurrentPitcher(homeTeam);
                }
            }

        }


	}
}
